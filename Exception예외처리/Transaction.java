package Exception예외처리;

// 트랜잭션과 예외처리는 매우 밀접한 관련이 있다.
//트랜잭션은 하나의 작업 단위를 뜻한다.

//예를들어 쇼핑몰의 "상품발송"이라는 트랜잭션을 가정해 보자. 
//"상품발송" 이라는 트랜잭션에는 다음과 같은 작업들이 있을 수 있다.

상품발송() {
    포장();
    영수증발행();
    발송();
}

포장() {
   ...
}

영수증발행() {
   ...
}

발송() {
   ...
}

//쇼핑몰의 운영자는 이 3가지 일들 중 하나라도 실패하면
//3가지 모두 취소하고 "상품발송" 전의 상태로 되돌리고 싶을 것이다.
//이렇게 모두 취소하는 행위를 전문용어로 롤백(Rollback)이라고 말한다.

상품발송() {
    try {
        포장();
        영수증발행();
        발송();
    }catch(예외) {
        모두취소();  // 하나라도 실패하면 모두 취소한다.
    }
}

포장() throws 예외 {
   ...
}

영수증발행() throws 예외 {
   ...
}

발송() throws 예외 {
   ...
}
//위와 같이 코드를 작성하면 포장, 영수증발행, 발송이라는 세개의 단위작업 중 
//하나라도 실패할 경우 "예외"가 발생되어 상품발송이 모두 취소 될 것이다.

//만약 위 처럼 "상품발송" 메서드가 아닌 포장, 영수증발행, 발송메소드에 
//각각 예외처리가 되어 있다고 가정 해 보자.

상품발송() {
    포장();
    영수증발행();
    발송();
}

포장(){
    try {
       ...
    }catch(예외) {
       포장취소();
    }
}

영수증발행() {
    try {
       ...
    }catch(예외) {
       영수증발행취소();
    }
}

발송() {
    try {
       ...
    }catch(예외) {
       발송취소();
    }
}

//이렇게 각각의 메소드에 예외가 처리되어 있다면 포장은 되었는데 발송은 안되고 
//포장도 안되었는데 발송이 되고 이런 뒤죽 박죽의 상황이 연출될 것이다. 
//실제 프로젝트에서도 두번째 경우처럼 트랜잭션관리를 잘못하여 
//고생하는 경우를 많이 보았는데이것은 일종의 재앙에 가깝다.


public class Transaction {

}
